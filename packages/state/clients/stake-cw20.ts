/**
 * This file was automatically generated by cosmwasm-typescript-gen.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  ExecuteResult,
  SigningCosmWasmClient,
} from '@cosmjs/cosmwasm-stargate'
export interface AllAccountsResponse {
  accounts: string[]
  [k: string]: unknown
}
export type Uint128 = string
export type Expiration =
  | {
      at_height: number
    }
  | {
      at_time: Timestamp
    }
  | {
      never: {
        [k: string]: unknown
      }
    }
export type Timestamp = Uint64
export type Uint64 = string
export interface AllAllowancesResponse {
  allowances: AllowanceInfo[]
  [k: string]: unknown
}
export interface AllowanceInfo {
  allowance: Uint128
  expires: Expiration
  spender: string
  [k: string]: unknown
}
export interface AllowanceResponse {
  allowance: Uint128
  expires: Expiration
  [k: string]: unknown
}
export interface BalanceResponse {
  balance: Uint128
  [k: string]: unknown
}
export interface ClaimsResponse {
  claims: Claim[]
  [k: string]: unknown
}
export interface Claim {
  amount: Uint128
  release_at: Expiration
  [k: string]: unknown
}
export type Duration =
  | {
      height: number
    }
  | {
      time: number
    }
export interface GetConfigResponse {
  manager?: string | null
  owner?: string | null
  token_address: string
  unstaking_duration?: Duration | null
  [k: string]: unknown
}
export interface GetHooksResponse {
  hooks: string[]
  [k: string]: unknown
}
export interface InstantiateMsg {
  manager?: string | null
  owner?: string | null
  token_address: string
  unstaking_duration?: Duration | null
  [k: string]: unknown
}
export interface StakedBalanceAtHeightResponse {
  balance: Uint128
  height: number
  [k: string]: unknown
}
export interface StakedValueResponse {
  value: Uint128
  [k: string]: unknown
}
export interface TokenInfoResponse {
  decimals: number
  name: string
  symbol: string
  total_supply: Uint128
  [k: string]: unknown
}
export interface TotalStakedAtHeightResponse {
  height: number
  total: Uint128
  [k: string]: unknown
}
export interface TotalValueResponse {
  total: Uint128
  [k: string]: unknown
}
export interface StakeCw20ReadOnlyInterface {
  contractAddress: string
  stakedBalanceAtHeight: ({
    address,
    height,
  }: {
    address: string
    height?: number
  }) => Promise<StakedBalanceAtHeightResponse>
  totalStakedAtHeight: ({
    height,
  }: {
    height?: number
  }) => Promise<TotalStakedAtHeightResponse>
  stakedValue: ({
    address,
  }: {
    address: string
  }) => Promise<StakedValueResponse>
  totalValue: () => Promise<TotalValueResponse>
  getConfig: () => Promise<GetConfigResponse>
  claims: ({ address }: { address: string }) => Promise<ClaimsResponse>
  getHooks: () => Promise<GetHooksResponse>
}
export class StakeCw20QueryClient implements StakeCw20ReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.stakedBalanceAtHeight = this.stakedBalanceAtHeight.bind(this)
    this.totalStakedAtHeight = this.totalStakedAtHeight.bind(this)
    this.stakedValue = this.stakedValue.bind(this)
    this.totalValue = this.totalValue.bind(this)
    this.getConfig = this.getConfig.bind(this)
    this.claims = this.claims.bind(this)
    this.getHooks = this.getHooks.bind(this)
  }

  stakedBalanceAtHeight = async ({
    address,
    height,
  }: {
    address: string
    height?: number
  }): Promise<StakedBalanceAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      staked_balance_at_height: {
        address,
        height,
      },
    })
  }
  totalStakedAtHeight = async ({
    height,
  }: {
    height?: number
  }): Promise<TotalStakedAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_staked_at_height: {
        height,
      },
    })
  }
  stakedValue = async ({
    address,
  }: {
    address: string
  }): Promise<StakedValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      staked_value: {
        address,
      },
    })
  }
  totalValue = async (): Promise<TotalValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_value: {},
    })
  }
  getConfig = async (): Promise<GetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {},
    })
  }
  claims = async ({
    address,
  }: {
    address: string
  }): Promise<ClaimsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      claims: {
        address,
      },
    })
  }
  getHooks = async (): Promise<GetHooksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_hooks: {},
    })
  }
}
export interface StakeCw20Interface extends StakeCw20ReadOnlyInterface {
  contractAddress: string
  sender: string
  receive: () => Promise<ExecuteResult>
  unstake: ({ amount }: { amount: Uint128 }) => Promise<ExecuteResult>
  claim: () => Promise<ExecuteResult>
  updateConfig: ({
    duration,
    manager,
    owner,
  }: {
    duration?: Duration
    manager?: string
    owner?: string
  }) => Promise<ExecuteResult>
  addHook: ({ addr }: { addr: string }) => Promise<ExecuteResult>
  removeHook: ({ addr }: { addr: string }) => Promise<ExecuteResult>
}
export class StakeCw20Client
  extends StakeCw20QueryClient
  implements StakeCw20Interface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.receive = this.receive.bind(this)
    this.unstake = this.unstake.bind(this)
    this.claim = this.claim.bind(this)
    this.updateConfig = this.updateConfig.bind(this)
    this.addHook = this.addHook.bind(this)
    this.removeHook = this.removeHook.bind(this)
  }

  receive = async (): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {},
      },
      'auto'
    )
  }
  unstake = async ({ amount }: { amount: Uint128 }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        unstake: {
          amount,
        },
      },
      'auto'
    )
  }
  claim = async (): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        claim: {},
      },
      'auto'
    )
  }
  updateConfig = async ({
    duration,
    manager,
    owner,
  }: {
    duration?: Duration
    manager?: string
    owner?: string
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          duration,
          manager,
          owner,
        },
      },
      'auto'
    )
  }
  addHook = async ({ addr }: { addr: string }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_hook: {
          addr,
        },
      },
      'auto'
    )
  }
  removeHook = async ({ addr }: { addr: string }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_hook: {
          addr,
        },
      },
      'auto'
    )
  }
}
